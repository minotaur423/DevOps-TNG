### Vagrant File Contents ###

########################################################################
# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http = "http://bcpxy.nycnet:8080/"
    config.proxy.https = "http://bcpxy.nycnet:8080/"
    config.proxy.no_proxy = "localhost,127.0.0.1,.example.com"
  end
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/centos-7.5"
  # config.vm.box_download_insecure = true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.define "client" do |client| 
    client.vm.hostname = "client"
    client.vm.network "private_network", ip: "192.168.33.10"
  end
#  config.vm.define "server" do |server| 
#    server.vm.hostname = "server"
#    server.vm.network "private_network", ip: "192.168.33.20"
#  end
  config.vm.define "webserver" do |webserver| 
    webserver.vm.hostname = "webserver"
    webserver.vm.network "private_network", ip: "192.168.33.20"
    webserver.vm.provision "ansible" do |ansible|
      ansible.playbook = "myplaybook.yml"
    end
  end
  config.vm.define "db" do |db| 
    db.vm.hostname = "database"
    db.vm.network "private_network", ip: "192.168.33.30"
  end
end
#######################################################################

### Playbook Contents ###

#######################################################################
 - hosts: all
   become: yes
   tasks:
       - name: Ensure that Apache web server is installed
         yum: 
             name: httpd 
             state: present
       - name: Ensure that the service is running and presistent
         service: name=httpd state=started enabled=yes
#######################################################################

### On client server: ###
sudo yum -y install ansible

vi /etc/ansible/hosts
	* add the information for the servers as shown below:
	[web]
	192.168.33.20
	[db]
	192.168.33.30

[vagrant@client ~]$ ssh-keygen -t RSA
[vagrant@client ~]$ ssh-copy-id 192.168.33.20
[vagrant@client ~]$ ssh-copy-id 192.168.33.30

### From client server: ###
ansible db -b -m yum -a 'name=mariadb,mariadb-server state=present'

ansible db -b -m service -a 'name=mariadb state=started enabled=yes'

ansible db -b -m yum -a 'name=MySQL-python state=present'

ansible db -b -m mysql_user -a 'name=root host=localhost password=mypassword'

[vagrant@database ~]$ mysql -u root -pmypassword

ansible db -b -m mysql_user -a 'name=codeigniter host=% password=cipassword priv=appdb.*:ALL state=present login_user=root login_password=mypassword'

ansible db -m mysql_db -a 'name=appdb login_user=root login_password=mypassword'

ansible web -b -m yum -a 'name=mysql'

[vagrant@webserver ~]$ mysql -u codeigniter -h 192.168.33.30 -pcipassword

# Configure EPEL and Webtatic repositories on the web server machine
ansible web -b -m yum_repository -a "name=epel description='EPEL repository' baseurl='https://download.fedoraproject.org/pub/epel/\$releaserver/\$basearch/' gpgcheck=no state=present"

ansible web -b -m yum_repository -a "name=webtatic description='Webtatic repository' baseurl='https://repo.webtatic.com/yum/el7/\$basearch/' gpgcheck=no state=present"

ansible web -b -m group -a "name=developers state=present"

ansible web -b -m user -a "name=cidev group=developers"

ansible web -b -m user -a "name=cidev group=developers comment='This is the codeigniter user'"

ansible all -m stat -a 'path=/etc/hosts'

sudo yum -y install epel-release

sudo yum -y install jq

ansible web -m stat -a 'path=/etc/hosts' | sed 's/.*SUCCESS.*=> //g' | jq '.stat | {perms: .mode, group: .gr_name, owner: .pw_name}'

echo "This is a test file." > welcome.txt

ansible web -m copy -a "src=welcome.txt dest=/tmp/welcome.txt"  --> To copy a file to a remote server.

mkdir tools

cd tools

for i in {1..10}; do touch item${i}; done

ansible web -m copy -a "src=tools dest=/tmp/"  --> To copy a directory and files to a remote server.

echo "This is a test file." > tools/welcome.txt

ansible web -m copy -a "src=tools/ dest=/tmp/"  --> To copy files to a remote server.

ansible all -m fetch -a 'src=/etc/hosts dest=/tmp'  --> To fetch a file from a remote server.

ansible web -m copy -a 'content="" dest=/home/vagrant/newfile.txt'  --> To create a new file.

ansible web -b -m file -a 'path=/home/vagrant/newfile.txt owner=cidev group=developers mode=700' --> To manipulate the contents of /home/vagrant/newfile.txt

ansible web -m file -a 'src=/etc/hosts dest=/tmp/hosts state=link'  --> To create a symbolic link to /etc/hosts in /tmp/hosts.

ansible web -m file -a 'path=/home/vagrant/newfile.txt state=absent'  --> To delete file /home/vagrant/newfile.txt.

ansible web -b -m file -a 'path=/home/vagrant/newdir mode=700 owner=cidev group=developers state=directory' --> To create a new directory.

ansible web -b -m file -a 'path=/home/vagrant/newdir state=absent'  --> To delete a directory.

ansible all -b -m cron -a "name=archive-logs hour=0 job='/opt/jobs/archive.sh'"  --> Creates a cron job on all servers.

ansible all -b -m cron -a "name=archive-logs special_time=hourly job='/opt/jobs/archive.sh'" --> Creates an hourly cron job.

ansible all -b -m cron -a "name=archive-logs user=cidev special_time=hourly job='/opt/jobs/archive.sh'"  --> Creates an hourly cron job for user cidev.

ansible all -b -m cron -a "name=archive-logs user=cidev state=absent"  --> To delete cron job for user cidev.

ansible all -b -m cron -a "name=archive-logs state=absent"  --> To delete cron job for user root.

